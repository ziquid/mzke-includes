# feature/certs.inc.mk
FEATURE_CERTS := Y

CERTS_DIR := dynamic/$(ENV)
CERTS_TARGET := local-certs

CERTS_LOCAL_FILES := $(foreach domain,$(CERTS_LOCAL_DOMAINS),mkcert/$(domain).pem mkcert/$(domain)-key.pem)
CERTS_LOCAL_CONFIGS := $(foreach domain,$(CERTS_LOCAL_DOMAINS),$(CERTS_DIR)/mkcert-$(domain).yml)
ifdef CERTS_LOCAL_FILES
CERTS_TARGET := local-certs
endif

CERTS_DEV_FILES := $(foreach domain,$(CERTS_DEV_DOMAINS),mkcert/$(domain).pem mkcert/$(domain)-key.pem)
CERTS_DEV_CONFIGS := $(foreach domain,$(CERTS_DEV_DOMAINS),$(CERTS_DIR)/mkcert-$(domain).yml)
ifdef CERTS_DEV_FILES
CERTS_TARGET := dev-certs
endif

ifndef CERTS_TARGET
$(warning FEATURE certs but no CERTS_LOCAL_DOMAINS nor CERTS_DEV_DOMAINS defined!)
endif

CERTS_ALL_DOMAINS := $(CERTS_LOCAL_DOMAINS) $(CERTS_DEV_DOMAINS)
CERTS_ALL_FILES := $(CERTS_LOCAL_FILES) $(CERTS_DEV_FILES)
CERTS_ALL_CONFIGS := $(CERTS_LOCAL_CONFIGS) $(CERTS_DEV_CONFIGS)
CERTS_DEFAULT_DOMAIN := $(firstword $(CERTS_ALL_DOMAINS))
CERTS_DEFAULT_DEV_DOMAIN := $(firstword $(CERTS_DEV_DOMAINS))
CERTS_DEFAULT_LOCAL_DOMAIN := $(firstword $(CERTS_LOCAL_DOMAINS))

# Define shared traefik files for dependency tracking (requires traefik feature)
ifdef FEATURE_TRAEFIK
CERTS_SHARED_FILES := $(foreach domain,$(CERTS_ALL_DOMAINS),$(TRAEFIK_DIR)/mkcert/$(domain).pem $(TRAEFIK_DIR)/mkcert/$(domain)-key.pem)
CERTS_SHARED_CONFIGS := $(foreach domain,$(CERTS_ALL_DOMAINS),$(TRAEFIK_DIR)/dynamic/$(ENV)/mkcert-$(domain).yml)
endif

# Pattern rule to generate a dynamic yml file for each domain
$(CERTS_DIR)/mkcert-%.yml: mkcert/%.pem mkcert/%-key.pem
	$(call debug,Generating cert config $@ ...)
	@printf '# This file is auto-generated by mzke. Do not edit manually.\n# Generated for domain: %s\n# To regenerate: mzke clean-certs && mzke certs\n\ntls:\n  certificates:\n    - certFile: /mkcert/%s.pem\n      keyFile: /mkcert/%s-key.pem\n' "$*" "$*" "$*" > $@

.PHONY: certs
certs: $(CERTS_TARGET) ## Create and install SSL certs; Synonym for $(CERTS_TARGET)

CERTS_CLEAN_DEPS := clean-local-certs

ifdef FEATURE_TRAEFIK
ifndef IS_TRAEFIK
CERTS_CLEAN_DEPS += clean-traefik-certs
endif # IS_TRAEFIK
endif # FEATURE_TRAEFIK

.PHONY: clean-certs
clean-certs: $(CERTS_CLEAN_DEPS) ## Remove all SSL certs and PEM files; Synonym for $(CERTS_CLEAN_DEPS)

clean-local-certs: ## Remove all SSL certs and PEM files from local filesystem
	rm -f dynamic/*/mkcert-*.yml mkcert/*.pem

ifdef FEATURE_TRAEFIK
ifndef IS_TRAEFIK
.PHONY: clean-traefik-certs
clean-traefik-certs: ## Remove all SSL certs and PEM files from shared traefik directory $(TRAEFIK_DIR)
	rm -f $(CERTS_SHARED_FILES) $(CERTS_SHARED_CONFIGS)
endif # IS_TRAEFIK
endif # FEATURE_TRAEFIK

ifdef CERTS_DEV_FILES
.PHONY: dev-certs
dev-certs: $(CERTS_DEV_FILES) $(CERTS_DEV_CONFIGS) ## Create SSL certs and dynamic yml files for $(CERTS_DEV_DOMAINS)
endif # CERTS_DEV_FILES

ifdef CERTS_LOCAL_FILES
.PHONY: local-certs
local-certs: $(CERTS_LOCAL_FILES) $(CERTS_LOCAL_CONFIGS) ## Create SSL certs and dynamic yml files for $(CERTS_LOCAL_DOMAINS)
endif # CERTS_LOCAL_FILES

# Pattern rules to copy certificates to shared traefik directory (requires traefik feature)
ifdef FEATURE_TRAEFIK
ifndef IS_TRAEFIK
CERTS_TARGET += install-certs
.PHONY: install-certs
install-certs: install-certs-files install-certs-configs ## Copy cert files and configs to shared traefik directory $(TRAEFIK_DIR)
install-certs-files: $(CERTS_ALL_FILES)
	$(call debug,Copying cert files to shared traefik directory)
	cp $^ $(TRAEFIK_DIR)/mkcert
install-certs-configs: $(CERTS_ALL_CONFIGS)
	$(call debug,Copying cert configs to shared traefik directory)
	cp $^ $(TRAEFIK_DIR)/$(CERTS_DIR)
endif # IS_TRAEFIK

.PHONY: launch
.SECONDEXPANSION:
launch : launch-$$(ENV) ## Open the site in a browser (Mac) or print URL to console (others)
	@:

ifdef CERTS_DEFAULT_LOCAL_DOMAIN
.PHONY: launch-local
launch-local: traefik-running ## Open the local site in a browser (Mac) or print URL to console (others)
ifeq ($(IS_MAC),Y)
	open "https://$(CERTS_DEFAULT_LOCAL_DOMAIN)/"
else
	$(info open https://$(CERTS_DEFAULT_LOCAL_DOMAIN)/ in a browser)
endif # IS_MAC
endif # CERTS_DEFAULT_LOCAL_DOMAIN

ifdef CERTS_DEFAULT_DEV_DOMAIN
.PHONY: launch-dev
launch-dev: traefik-running ## Open the dev site in a browser (Mac) or print URL to console (others)
ifeq ($(IS_MAC),Y)
	open "https://$(CERTS_DEFAULT_DEV_DOMAIN)/"
else
	$(info open https://$(CERTS_DEFAULT_DEV_DOMAIN)/ in a browser)
endif # IS_MAC
endif # CERTS_DEFAULT_DEV_DOMAIN
endif # FEATURE_TRAEFIK

# Pattern rule to generate a cert for each domain.
# Key depends on cert; no command needed.
mkcert/%-key.pem: mkcert/%.pem ; @:

mkcert/%.pem:
	$(call debug,checking for existing cert $@ ...)
	@if ! openssl x509 -in "$@" -noout >/dev/null 2>&1; then \
	  echo "mkcert: (re)issuing $*"; \
	  mkcert -cert-file "$@" -key-file "mkcert/$*-key.pem" "$*"; \
	fi

show-cert-%: # mkcert/%.pem
	@printf "\n=== %s ===\n" "$*"
	@openssl x509 -in mkcert/$*.pem -noout -subject -issuer -enddate -serial
	@openssl x509 -in mkcert/$*.pem -noout -ext subjectAltName 2>/dev/null | sed 's/^/  /'

.PHONY: show-certs
CERTS_SHOW_DEPS := $(addprefix show-cert-,$(CERTS_ALL_DOMAINS))
show-certs: $(CERTS_SHOW_DEPS) ## Show info for all certs ($(CERTS_ALL_DOMAINS))

.PHONY: test-certs
test-certs: test-snis test-https ## Run all cert tests (HTTPS and SNIs)

test-https-%: traefik-running # mkcert/%.pem
	$(call debug,Getting HTTPS header for $*)
	@curl -k -sS -I --resolve $*:443:127.0.0.1 "https://$*/" \
	  | head -n 6 \
	  || { echo "ERROR: HTTPS failed for $* (resolve to 127.0.0.1)"; exit 4; }

.PHONY: test-https
CERTS_TEST_HTTPS_DEPS := $(addprefix test-https-,$(CERTS_ALL_DOMAINS))
test-https: $(CERTS_TEST_HTTPS_DEPS) ## Test HTTPS for all certs, requires traefik running (Currently running: $(TRAEFIK_RUNNING))

test-sni-%: traefik-running # mkcert/%.pem
	$(call debug,Testing SNI for $*)
	@{ \
	  openssl s_client -connect $${HOST:-127.0.0.1:443} -servername $* </dev/null 2>/dev/null \
	    || { echo "ERROR: TLS endpoint not reachable at $${HOST:-127.0.0.1:443}"; exit 2; }; \
	} | openssl x509 -noout -subject -issuer -enddate \
	  || { echo "ERROR: no certificate presented for $* (is Traefik up and routing this host?)"; exit 3; }

.PHONY: test-snis
CERTS_TEST_SNI_DEPS := $(addprefix test-sni-,$(CERTS_ALL_DOMAINS))
test-snis: $(CERTS_TEST_SNI_DEPS) ## Test SNIs for all certs, requires traefik running (Currently running: $(TRAEFIK_RUNNING))
